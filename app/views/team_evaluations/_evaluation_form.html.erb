<%= form_tag team_evaluations_path(), :remote => true do %>
  <%= hidden_field_tag :group_id, @group.id %>
  <%= hidden_field_tag :iteration_id, @iteration.id %>
  <%= hidden_field_tag :grader_id, @grader.id %>

  <% @other_group_students.each_with_index do |student, index| %>
    <div class="evaluation-module-wrapper">
      <div class="evaluation-module" data-student-id="<%= student.id %>">
        <h4 class="student-name title"><%= student.full_name %></h4>

        <div class="scores-container select-container submodule">
          <h4 class="submodule-heading">Score: <span class="score-label"></span></h4>

          <div class="select-wrapper">
            <%= hidden_field_tag :"student-#{student.id}-score", 5, :class => "score-input" %>
            <div class="slider"></div>
          </div>
          <div class="slider-labels-wrapper">
            <div class="slider-label-container">
              <div class="slider-label-value">-3</div>
              <div class="slider-label-description">Contributed nothing</div>
            </div>
            <div class="slider-label-container">
              <div class="slider-label-value">-2</div>
              <div class="slider-label-description">Contributed a lot less than others</div>
            </div>
            <div class="slider-label-container">
              <div class="slider-label-value">-1</div>
              <div class="slider-label-description">Contributed a little less than others</div>
            </div>
            <div class="slider-label-container">
              <div class="slider-label-value">0</div>
              <div class="slider-label-description">Contributed equally</div>
            </div>
            <div class="slider-label-container last">
              <div class="slider-label-value">+1</div>
              <div class="slider-label-description">Contributed a lot more than others</div>
            </div>
          </div>
        </div>

        <div class="justification-container submodule">
          <h4 class="submodule-heading">Justification</h4>
          <%= text_area_tag :"student-#{student.id}-comment", "", :size => "60x6", :placeholder => "Please justify" %>
        </div>
      </div>
    </div>
  <% end %>

  <div class="actions">
    <%= submit_tag "Submit", :id => "evaluation-submit", :class => "btn", :disabled => "disabled", :onclick => "return beforeSubmit();" %>
    <span class="activity-indicator inactive">
      <%= image_tag "activity.gif" %>
    </span>
  </div>

<% end %>

<script type="text/javascript">
  var $submitBtn          = $('#evaluation-submit'),
      $activityIndicator  = $('.activity-indicator'),
      EvaluationFormData  = EvaluationForm['formData'];

      EvaluationForm['studentIds']  = '<%= @other_group_students.map(&:id).join(",") %>'.split(','),
      EvaluationForm['numStudents'] = '<%= @other_group_students.size %>';
      EvaluationForm.beforeSubmit = function() {
        var studentIds      = this['studentIds'],
            numStudents     = this['numStudents'],
            tempStudentId,
            tempScore,
            tempComment,
            tempLowestId    = 999;

        for (var i = 0; i < numStudents; i++) {
          tempStudentId = studentIds[i];
          tempScore     = $('input[name="student-'+tempStudentId+'-score"]').val();
          tempComment   = $('textarea[name="student-'+tempStudentId+'-comment"]').val();
          if (tempScore === undefined) {
            if (tempStudentId < tempLowestId) {
              tempLowestId = tempStudentId;
            }
            $('input[name="student-'+tempStudentId+'-score"]').closest('.submodule').find('h4').addClass('error');
            $('input[name="student-'+tempStudentId+'-score"]').closest('.submodule').find('.select-wrapper').addClass('error');
          } else {
            $('input[name="student-'+tempStudentId+'-score"]').closest('.submodule').find('h4').removeClass('error');
            $('input[name="student-'+tempStudentId+'-score"]').closest('.submodule').find('.select-wrapper').removeClass('error');
          }
          if (tempComment.trim() === '') {
            if (tempStudentId < tempLowestId) {
              tempLowestId = tempStudentId;
            }
            $('textarea[name="student-'+tempStudentId+'-comment"]').closest('.submodule').find('h4').addClass('error');
            $('textarea[name="student-'+tempStudentId+'-comment"]').closest('.submodule').find('textarea').addClass('error');
          } else {
            $('textarea[name="student-'+tempStudentId+'-comment"]').closest('.submodule').find('h4').removeClass('error');
            $('textarea[name="student-'+tempStudentId+'-comment"]').closest('.submodule').find('textarea').removeClass('error');
          }
        }

        if (tempLowestId < 999) {
          var $earliestErrorDiv = $('.evaluation-module[data-student-id="'+tempLowestId+'"]');
          $('html,body').animate({
            scrollTop: $earliestErrorDiv.offset().top
          }, 300);
          return false;
        } else {
          $activityIndicator.removeClass('inactive');
          return true;
        }
      };

  // functions
  function beforeSubmit() {
    return EvaluationForm.beforeSubmit();
  }

  function checkToggleSubmitBtn() {
    var studentIds  = EvaluationForm.studentIds,
        numStudents = EvaluationForm.numStudents,
        tempStudentId;

    for (var i = 0; i < numStudents; i++) {
      tempStudentId = studentIds[i];
      if ( $('textarea[name="student-'+tempStudentId+'-comment"]').val().trim() === '' ) {
        $submitBtn.attr('disabled', 'disabled');
        return;
      }
    }
    $submitBtn.removeAttr('disabled');
  }

  // jQuery
  $().ready(function() {
    $('input[type="radio"]').live('change', function() {
      $(this).closest('.submodule').find('h4').removeClass('error');
      $(this).closest('.submodule').find('.select-wrapper').removeClass('error');
      checkToggleSubmitBtn();
    });

    $('textarea').live('keyup', function() {
      if ($(this).val().trim() !== '') {
        $(this).closest('.submodule').find('h4').removeClass('error');
        $(this).closest('.submodule').find('textarea').removeClass('error');
      }
      checkToggleSubmitBtn();
    });

    $.each($('.score-input'), function(index, item) {
      $(item).val(0);
    });

    $('.slider-label-container').live('click', function(e) {
      var newScore  = $(this).index() - 3,
          $slider   = $(this).closest('.submodule').find('.slider');

      $slider.slider('value', newScore);
      slideToScore($slider, newScore);
    });

    $('.slider').slider({
      min: GradeScale['min'],
      max: GradeScale['max'],
      range: 'min',
      value: 0,
      slide: function( event, ui ) {
        var score       = ui.value;
        slideToScore($(this), score);
      }
    });

    // initialize all sliders and forms
    var initColor = Colors.scoreToRgba(0, 1);
    $('.slider').find('div').css('background', initColor);
    $('.slider').find('a').css('background', initColor);
    $('.slider').closest('.submodule').find('.score-label').text(0).css('color', initColor);
    $('.slider-label-container:nth-child(4)').css('color', initColor);

  });

  function slideToScore($slider, score) {
    var rgbaString              = Colors.scoreToRgba(score, 1),
        $sliderSubmodule        = $slider.closest('.submodule'),
        $sliderLabelContainers  = $sliderSubmodule.find('.slider-label-container'),
        $sliderLabelContainer   = $sliderSubmodule.find('.slider-label-container:nth-child('+(score+4)+')'),
        $scoreLabel             = $sliderSubmodule.find('.score-label'),
        $scoreInput             = $sliderSubmodule.find('.score-input'),
        $sliderBackground       = $slider.find('div'),
        $sliderKnob             = $slider.find('a');

    $sliderLabelContainers.css('color', '#333');
    $sliderLabelContainer.css('color', rgbaString);
    if (score == 1) {
      score = '+1';
    }

    $scoreLabel.text(score).css('color', rgbaString);
    $scoreInput.val(score);
    $sliderBackground.css('background', rgbaString);
    $sliderKnob.css('background', rgbaString);
  }

</script>



